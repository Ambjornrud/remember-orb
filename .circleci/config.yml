version: 2.1

orbs:
  orb-tools: circleci/orb-tools@9
#  win: circleci/windows@2.4
  mem: ambjornrud/remember-orb@<<pipeline.parameters.dev-orb-version>>

aliases:
  - &EXPECTED_RESULT
      bar

  - &filter-only-master
    filters:
      branches:
        only:
          - master

orb_prep_jobs: &orb_prep_jobs
    [
      orb-tools/lint,
      orb-tools/shellcheck,
      orb-tools/pack
    ]

orb_integration-tests_jobs: &orb_integration-tests_jobs
    [
      recall-first-linux
      ,remember-linux
      ,recall-linux
#      ,remember-mac
#      ,recall-mac
#      ,remember-windows
#      recall-windows
    ]

# Pipeline parameters
parameters:
  # These pipeline parameters are required by the "trigger-integration-tests-workflow"
  # job, by default.
  run-integration-tests:
    type: boolean
    default: false
  dev-orb-version:
    type: string
    default: "dev:alpha"

executors:
  linux:
    docker:
      - image: circleci/python:3.7
  mac:
    macos:
      xcode: "11.1.0"

jobs:
  test-remember:
    parameters:
      exec:
        type: executor
      env_var:
        type: string
      expected-result:
        type: string
        description: A constant value for this test
        default: *EXPECTED_RESULT
    executor: << parameters.exec >>
    steps:
      - mem/remember:
          env_var: << parameters.env_var >>
          value: << parameters.expected-result >>
      - run:
          name: I can use this right away...
          command: '[[ $<< parameters.env_var >> == "<< parameters.expected-result >>" ]]'

  test-recall:
    parameters:
      exec:
        type: executor
      env_var:
        type: string
      expected-result:
        type: string
        description: A constant value for this test
        default: *EXPECTED_RESULT
    executor: << parameters.exec >>
    steps:
      - mem/recall:
          env_var: << parameters.env_var >>
      - run:
          name: ...or later!
          command: '[[ $<< parameters.env_var >> == "<< parameters.expected-result >>" ]]'

workflows:
  lint_pack-validate_publish-dev:
    unless: << pipeline.parameters.run-integration-tests >>
    jobs:
      # This `lint-pack_validate_publish-dev` workflow will run on any commit
      # Lint the YAML
      - orb-tools/lint
      # Linting for BASH commands
      - orb-tools/shellcheck
      # Pack the orb into a single file and validate the result.
      - orb-tools/pack
      # release dev version of orb, for testing & possible publishing.
      # orb will be published as dev:alpha and dev:${CIRCLE_SHA1:0:7}.
      # requires a CircleCI API token to be stored as CIRCLE_TOKEN (default) in Context
      # https://circleci.com/docs/2.0/managing-api-tokens
      - orb-tools/publish-dev:
          orb-name: ambjornrud/remember-orb
          requires: *orb_prep_jobs
          context: orb-publishing

      # trigger an integration workflow to test the
      # dev:${CIRCLE_SHA1:0:7} version of this orb
      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration-dev
          requires:
            - orb-tools/publish-dev
          context: orb-publishing

  # This `integration-tests_prod-release` workflow will only run
  # when the run-integration-tests pipeline parameter is set to true.
  # It is meant to be triggered by the "trigger-integration-tests-workflow"
  # job, and run tests on <this orb>@dev:${CIRCLE_SHA1:0:7}.
  integration-tests_prod-release:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      # your integration test jobs go here: essentially, run all your orb's
      # jobs and commands to ensure they behave as expected. or, run other
      # integration tests of your choosing

      # integration tests for this orb
      - test-recall:
          name: recall-first-linux
          exec: linux
          env_var: FOO
      - test-remember:
          name: remember-linux
          exec: linux
          env_var: FOO
          requires:
            - recall-first-linux
      - test-recall:
          name: recall-linux
          exec: linux
          env_var: FOO
          requires:
            - remember-linux
      #- test-remember:
      #    name: remember-mac
      #    exec: mac
      #    env_var: BAR
      #- test-recall:
      #    name: recall-mac
      #    exec: mac
      #    env_var: BAR
      #    requires:
      #      - remember-mac
      #- test-remember:
      #    name: remember-windows
      #    exec: win/default
      #- test-recall:
      #    name: recall-windows
      #    exec: win/default
      #    requires:
      #      - remember-windows

      # publish a semver version of the orb. relies on
      # the commit subject containing the text "[semver:patch|minor|major|skip]"
      # as that will determine whether a patch, minor or major
      # version will be published or if publishing should
      # be skipped.
      # e.g. [semver:patch] will cause a patch version to be published.
      - orb-tools/dev-promote-prod-from-commit-subject:
          orb-name: ambjornrud/remember-orb
          add-pr-comment: false
          publish-version-tag: false
          fail-if-semver-not-indicated: false
          requires: *orb_integration-tests_jobs
          <<: [*filter-only-master]
          context: orb-publishing
