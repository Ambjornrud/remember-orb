version: 2.1

executors:
  linux:
    docker:
      - image: circleci/python:3.7
  mac:
    macos:
      xcode: "11.1.0"

workflows:
  orb:
    jobs:
      - test-remember:
          name: remember-linux
          exec: linux
          env_var: FOO
      - test-recall:
          name: recall-linux
          exec: linux
          env_var: FOO
          requires:
            - remember-linux
      - test-remember:
          name: remember-mac
          exec: mac
          env_var: BAR
      - test-recall:
          name: recall-mac
          exec: mac
          env_var: BAR
          requires:
            - remember-mac
      #- test-remember:
      #    name: remember-windows
      #    exec: win/default
      #- test-recall:
      #    name: recall-windows
      #    exec: win/default
      #    requires:
      #      - remember-windows
      - build-and-validate
      - orb-tools/publish-dev:
          orb-name: circleci/rememborb
          publish-alpha-version: false
          publish-sha-version: true
          requires:
            - build-and-validate
            - recall-linux
            - recall-mac
      - approval:
          type: approval
          requires:
            - build-and-validate
            - orb-tools/publish-dev
          filters:
            branches:
              only:
                - master
      - orb-tools/dev-promote-prod:
          orb-name: circleci/rememborb
          publish-version-tag: false
          requires:
            - approval
          filters:
            branches:
              only:
                - master

jobs:
  test-remember:
    parameters:
      exec:
        type: executor
      env_var:
        type: string
    executor: << parameters.exec >>
    steps:
      - mem/remember:
          env_var: << parameters.env_var >>
          value: bar
      - run:
          name: I can use this right away...
          command: '[[ $<< parameters.env_var >> == "bar" ]]'
  test-recall:
    parameters:
      exec:
        type: executor
      env_var:
        type: string
    executor: << parameters.exec >>
    steps:
      - mem/recall:
          env_var: << parameters.env_var >>
      - run:
          name: ...or later!
          command: '[[ $<< parameters.env_var >> == "bar" ]]'
  build-and-validate:
    docker:
      - image: circleci/ruby:2.4
    steps:
      - checkout
      - orb-tools/extract-inline-orb:
          file: orb.yml
          orb: mem
          source: .circleci/config.yml
      - cli/install
      - orb-tools/validate

orbs:
  orb-tools: circleci/orb-tools@8.27.4
  cli: circleci/circleci-cli@0.1.5
  win: circleci/windows@2.0.0

  mem:
    description: |
      A lightweight utility to persist environment variables across steps in a
      job, or across jobs in a workflow.

    examples:
      standard_usage:
        description: |
          A docker workflow, in which we need to remember the IMAGE_TAG across
          steps and jobs as we build, test, and deploy the image.

        usage:
          version: 2.1
          orbs:
            mem: circleci/rememborb@x.y.z

          jobs:
            publish_image:
              docker:
                - image: circleci/python:3.7
              steps:
                - mem/remember:
                    env_var: IMAGE_TAG
                    value: super_cool_image:1.0.$CIRCLE_BUILD_NUM-$CIRCLE_SHA
                - run: docker build -t $IMAGE_TAG .
                - run: docker push $IMAGE_TAG
            test_image:
              docker:
                - image: circleci/python:3.7
              steps:
                - mem/recall:
                    env_var: IMAGE_TAG
                - run: docker pull $IMAGE_TAG
                - run: docker run $IMAGE_TAG test_coolness
            deploy_image:
              docker:
                - image: circleci/python:3.7
              steps:
                - mem/recall:
                    env_var: IMAGE_TAG
                - run: docker pull $IMAGE_TAG
                - run: some_kubernetes_shenanigans $IMAGE_TAG
          workflows:
            highly_fault_tolerant_delivery:
              jobs:
                - publish_image
                - test_image:
                    requires:
                      - publish_image
                - deploy_image:
                    requires:
                      - test_image
    commands:
      remember:
        description: |
          Exports an environment variable that can be read throughout the remainder
          of this job, and persists the value to be `recall`ed in a downstream job.
        parameters:
          env_var:
            description: The environment variable to set.
            type: string
          value:
            description: The value to save to the variable.
            type: string
        steps:
          - run:
              name: Remember << parameters.env_var >>
              command: |
                export << parameters.env_var >>="<< parameters.value >>"
                exporter="export << parameters.env_var >>=${<< parameters.env_var >>}"
                echo $exporter >> $BASH_ENV
                remember_file="/tmp/circleci_remember/.circleci_remember/<< parameters.env_var >>/$CIRCLE_JOB"
                mkdir -p $(dirname $remember_file)
                echo $exporter >> $remember_file
                echo Remembering << parameters.env_var >> = ${<< parameters.env_var >>}
          - persist_to_workspace:
              root: /tmp/circleci_remember
              paths:
                - .circleci_remember/<< parameters.env_var >>
      recall:
        description: |
          Recalls an environment variable that was previously `remember`ed, and
          exports it so it can be read throughout the remainder of this job.
        parameters:
          env_var:
            description: The environment variable to recall.
            type: string
          from_job:
            description: Recall the environment variable persisted by the given job. Can be used to disambiguate between two remembered versions of the same variable.
            type: string
            default: ""
        steps:
          - attach_workspace:
              at: /tmp/circleci_remember
          - when:
              condition: << parameters.from_job >>
              steps:
                - run:
                    name: Recall << parameters.env_var >> from << parameters.from_job >>
                    command: |
                      remember_file=/tmp/circleci_remember/.circleci_remember/<< parameters.env_var >>
                      exporter=$(cat $remember_file)
                      $exporter
                      echo $exporter >> $BASH_ENV
                      echo Recalled << parameters.env_var >> = ${<< parameters.env_var >>}
          - unless:
              condition: << parameters.from_job >>
              steps:
                - run:
                    name: Recall << parameters.env_var >>
                    command: |
                      remember_dir=/tmp/circleci_remember/.circleci_remember/
                      remember_count=$(ls -1q $remember_dir/)
                      remember_file=$(echo $remember_dir/*)
                      if [[ ! ${remember_count} -eq 1 ]]; then
                        echo "Tried to recall exactly one instance of << parameters.env_var >>, found:"
                        ls -1 $remember_dir
                        exit 1
                      fi
                      exporter=$(cat $remember_file)
                      $exporter
                      echo $exporter >> $BASH_ENV
                      echo Recalled << parameters.env_var >> = ${<< parameters.env_var >>}
